{"version":3,"sources":["components/TopBar.js","components/JSONOutput.js","components/ConsoleComponent.js","components/CodeMirrorComponent.js","utils/Load.js","utils/Processing.js","utils/RunSUSHI.js","components/RunButton.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","color","palette","text","primary","background","warning","dark","position","docButton","margin","spacing","title","edge","fontFamily","ButtonAppBar","classes","AppBar","className","Toolbar","Typography","variant","Button","box","padding","grey","height","JSONOutput","props","shouldDisplaySUSHI","Box","border","common","white","black","Console","require","CodeMirrorComponent","value","options","lineNumbers","onChange","editor","data","updateTextValue","updateShouldRunSUSHI","unzipDependencies","resources","Promise","resolve","http","get","res","extract","tarStream","on","header","stream","next","buf","chunk","toString","resource","JSON","parse","resourceType","push","resume","pipe","zlib","createGunzip","loadDependenciesInStorage","database","reject","transaction","oncomplete","onerror","event","objectStore","keyPath","forEach","add","loadAsFHIRDefs","FHIRdefs","getData","openCursor","onsuccess","iterator","result","continue","fillTank","rawFSHes","config","logger","info","docs","importText","FSHTank","loadExternalDependencies","version","a","shouldUnzip","finalDefs","FHIRDefinitions","OpenIDBRequest","indexedDB","open","target","onupgradeneeded","createObjectStore","runSUSHI","input","canonical","defs","tank","rawFSH","RawFSH","error","structDef","fishForFHIR","Type","Resource","outPackage","exportFHIR","display","alignItems","justifyContent","button","success","RunButton","onClick","console","log","testid","container","itemTop","itemBottom","App","useState","shouldRunSUSHI","setShouldRunSUSHI","setText","Grid","item","xs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8520cfcc.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { AppBar, Toolbar, Button, Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    color: theme.palette.text.primary,\n    background: theme.palette.warning.dark,\n    position: 'static'\n  },\n  docButton: {\n    margin: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1,\n    edge: 'start',\n    fontFamily: 'Consolas'\n  }\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n  return (\n    <AppBar className={classes.root}>\n      <Toolbar>\n        <Typography className={classes.title} variant=\"h6\">\n          FSH Playground\n        </Typography>\n        <Button className={classes.docButton} variant=\"outlined\">\n          Documentation\n        </Button>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  box: {\n    padding: theme.spacing(0, 2),\n    color: theme.palette.text.primary,\n    background: theme.palette.grey[400],\n    height: '100%',\n    fontFamily: 'Consolas'\n  }\n}));\n\nexport default function JSONOutput(props) {\n  const classes = useStyles();\n\n  //Checks to insure the shouldRunSUSHI is true (aka button has been pressed) and there is text to display for the output\n  if (props.shouldDisplaySUSHI && props.text) {\n    return (\n      <Box className={classes.box} border={1}>\n        <h4>Your Output:</h4>\n        <p>{props.text}</p>\n      </Box>\n    );\n  } else {\n    return (\n      <Box className={classes.box} border={1}>\n        <h4>Your Output Will Display Here:</h4>\n      </Box>\n    );\n  }\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  box: {\n    padding: theme.spacing(2),\n    color: theme.palette.common.white,\n    background: theme.palette.common.black,\n    height: '100%',\n    fontFamily: 'Consolas'\n  }\n}));\n\nexport default function Console() {\n  const classes = useStyles();\n  return (\n    <Box className={classes.box}>\n      <h1>Console is here</h1>\n    </Box>\n  );\n}\n","import React from 'react';\nimport { Box } from '@material-ui/core';\nimport { UnControlled as CodeMirror } from 'react-codemirror2';\nimport { makeStyles } from '@material-ui/core/styles';\nimport '../style/CodeMirrorComponent.css';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\nrequire('codemirror/mode/xml/xml');\nrequire('codemirror/mode/javascript/javascript');\n\nconst useStyles = makeStyles((theme) => ({\n  box: {\n    height: '100%'\n  }\n}));\n\nexport default function CodeMirrorComponent(props) {\n  const classes = useStyles();\n\n  //Updates both the text state with the codemirror value, and sets the shouldRunSUSHI back to false\n  function updateTextAndRun(text) {\n    props.updateTextValue(text);\n    props.updateShouldRunSUSHI(false);\n  }\n  return (\n    <Box className={classes.box}>\n      <CodeMirror\n        className=\"react-codemirror2\"\n        value={props.value}\n        options={{\n          theme: 'material',\n          lineNumbers: true\n        }}\n        onChange={(editor, data, value) => {\n          updateTextAndRun(value);\n        }}\n      />\n    </Box>\n  );\n}\n","import tarStream from 'tar-stream';\nimport zlib from 'zlib';\nimport http from 'http';\n\nexport function unzipDependencies(resources) {\n  return new Promise((resolve) => {\n    http.get('http://packages.fhir.org/hl7.fhir.r4.core/4.0.1', function (res) {\n      const extract = tarStream.extract();\n      // Unzip files\n      extract.on('entry', function (header, stream, next) {\n        let buf = '';\n        stream.on('data', function (chunk) {\n          buf += chunk.toString();\n        });\n        stream.on('end', function () {\n          try {\n            const resource = JSON.parse(buf);\n            if (resource.resourceType) {\n              resources.push(resource);\n            }\n          } catch {} //eslint-disable-line no-empty\n          next();\n        });\n        stream.resume();\n      });\n      extract.on('finish', function () {\n        resolve(resources);\n      });\n      res.pipe(zlib.createGunzip()).pipe(extract);\n    });\n  });\n}\n\nexport function loadDependenciesInStorage(database, resources) {\n  return new Promise((resolve, reject) => {\n    // Loads parsed json into indexDB\n    const transaction = database.transaction(['resources'], 'readwrite');\n    transaction.oncomplete = () => {\n      resolve();\n    };\n    transaction.onerror = (event) => {\n      reject(event);\n    };\n    const objectStore = transaction.objectStore('resources', { keyPath: ['id', 'resourceType'] });\n    resources.forEach((res) => {\n      objectStore.add(res);\n    });\n  });\n}\n\nexport function loadAsFHIRDefs(FHIRdefs, database) {\n  // Convert database data into FHIR Definitions\n  return new Promise((resolve, reject) => {\n    const getData = database\n      .transaction(['resources'], 'readonly')\n      .objectStore('resources', { keyPath: ['id', 'resourceType'] })\n      .openCursor();\n    getData.onerror = function () {\n      reject('There is an error getting data out!');\n    };\n    getData.onsuccess = function () {\n      const iterator = getData.result;\n      if (iterator) {\n        FHIRdefs.add(iterator.value);\n        iterator.continue();\n      } else {\n        resolve(FHIRdefs);\n      }\n    };\n  });\n}\n","import { logger } from 'fsh-sushi/dist/utils';\nimport { loadAsFHIRDefs, loadDependenciesInStorage, unzipDependencies } from './Load';\nimport { FHIRDefinitions } from 'fsh-sushi/dist/fhirdefs';\nimport { FSHTank, importText } from 'fsh-sushi/dist/import';\n\nexport function fillTank(rawFSHes, config) {\n  logger.info('Importing FSH text...');\n  const docs = importText(rawFSHes);\n  return new FSHTank(docs, config);\n}\n\nexport async function loadExternalDependencies(FHIRdefs, version) {\n  return new Promise((resolve, reject) => {\n    let database = null;\n    let shouldUnzip = false;\n    let finalDefs = FHIRDefinitions;\n    const OpenIDBRequest = indexedDB.open('FSH Playground Dependencies', version);\n    // If successful the database exists\n    OpenIDBRequest.onsuccess = async function (event) {\n      database = event.target.result;\n      const resources = [];\n      if (shouldUnzip) {\n        await unzipDependencies(resources);\n        await loadDependenciesInStorage(database, resources);\n      }\n      finalDefs = await loadAsFHIRDefs(FHIRdefs, database);\n      resolve(finalDefs);\n    };\n    // If upgrade is needed to the version, the database does not yet exist\n    OpenIDBRequest.onupgradeneeded = function (event) {\n      shouldUnzip = true;\n      database = event.target.result;\n      database.createObjectStore('resources', {\n        keyPath: ['id', 'resourceType']\n      });\n    };\n    // Checks if there is an error\n    OpenIDBRequest.onerror = function (event) {\n      reject(event);\n    };\n  });\n}\n","import { FSHTank, RawFSH } from 'fsh-sushi/dist/import';\nimport { exportFHIR } from 'fsh-sushi/dist/export';\nimport { logger, Type } from 'fsh-sushi/dist/utils';\nimport { FHIRDefinitions } from 'fsh-sushi/dist/fhirdefs';\nimport { loadExternalDependencies, fillTank } from './Processing';\n\nexport async function runSUSHI(input) {\n  // Hard Code config\n  const config = { canonical: 'http://default.org' };\n\n  // Load dependencies\n  let defs = new FHIRDefinitions();\n  const version = 1;\n  defs = await loadExternalDependencies(defs, version);\n\n  // Load and fill FSH Tank\n  let tank = FSHTank;\n  try {\n    const rawFSH = [new RawFSH(input)];\n    tank = fillTank(rawFSH, config);\n  } catch (e) {\n    logger.error('Something went wrong when importing the FSH definitions');\n    return;\n  }\n  //Check for StructureDefinition\n  const structDef = defs.fishForFHIR('StructureDefinition', Type.Resource);\n  if (structDef?.version !== '4.0.1') {\n    logger.error(\n      'StructureDefinition resource not found for v4.0.1. The FHIR R4 package in local cache' +\n        ' may be corrupt. Local FHIR cache can be found at <home-directory>/.fhir/packages.' +\n        ' For more information, see https://wiki.hl7.org/FHIR_Package_Cache#Location.'\n    );\n    return;\n  }\n\n  const outPackage = exportFHIR(tank, defs);\n  return outPackage;\n}\n\nexport default runSUSHI;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, Button } from '@material-ui/core';\nimport { runSUSHI } from '../utils/RunSUSHI';\nimport './CodeMirrorComponent';\n\nconst useStyles = makeStyles((theme) => ({\n  box: {\n    padding: theme.spacing(1),\n    color: theme.palette.text.primary,\n    background: theme.palette.grey[400],\n    height: '4vh',\n    display: 'flex;',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  button: {\n    color: theme.palette.common.white,\n    background: theme.palette.success.dark\n  }\n}));\n\nexport default function RunButton(props) {\n  const classes = useStyles();\n\n  //Sets the shouldRunSUSHI to true\n  async function handleClick() {\n    props.onClick(true);\n    const outPackage = await runSUSHI(props.text);\n    console.log(outPackage);\n  }\n\n  return (\n    <Box className={classes.box}>\n      <Button className={classes.button} onClick={handleClick} testid=\"Button\">\n        Run\n      </Button>\n    </Box>\n  );\n}\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid } from '@material-ui/core';\nimport TopBar from './components/TopBar';\nimport JSONOutput from './components/JSONOutput';\nimport ConsoleComponent from './components/ConsoleComponent';\nimport CodeMirrorComponent from './components/CodeMirrorComponent';\nimport RunButton from './components/RunButton';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    flexGrow: 1\n  },\n  itemTop: {\n    height: '75vh'\n  },\n  itemBottom: {\n    height: '25vh'\n  }\n}));\n\nexport default function App() {\n  const classes = useStyles();\n\n  const [shouldRunSUSHI, setShouldRunSUSHI] = useState(false);\n  const [text, setText] = useState('Edit FSH Here!');\n\n  function updateShouldRunSUSHI(shouldRunSUSHI) {\n    setShouldRunSUSHI(shouldRunSUSHI);\n  }\n  function updateTextValue(text) {\n    setText(text);\n  }\n\n  return (\n    <div className=\"root\">\n      <TopBar />\n      <RunButton onClick={updateShouldRunSUSHI} text={text} />\n      <Grid className={classes.container} container>\n        <Grid className={classes.itemTop} item xs={6}>\n          <CodeMirrorComponent\n            value={text}\n            updateTextValue={updateTextValue}\n            updateShouldRunSUSHI={updateShouldRunSUSHI}\n          />\n        </Grid>\n        <Grid className={classes.itemTop} item xs={6}>\n          <JSONOutput shouldDisplaySUSHI={shouldRunSUSHI} text={text} />\n        </Grid>\n        <Grid className={classes.itemBottom} item xs={12}>\n          <ConsoleComponent />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}